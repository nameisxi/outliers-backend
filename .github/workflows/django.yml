name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    container: node:latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

    steps:
      - name: Install PostgreSQL client
        run: |
          apt-get update
          apt-get install --yes postgresql-client
          
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create .env File
        run: |
          touch .env
          echo "PRODUCTION=TRUE" >> .env
          echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "GITHUB_ACTIONS_WORKFLOW=TRUE" >> .env
          echo "DATABASE_GITHUB_ACTIONS_NAME=postgres" >> .env
          echo "DATABASE_GITHUB_ACTIONS_USER=postgres" >> .env
          echo "DATABASE_GITHUB_ACTIONS_PASSWORD=postgres" >> .env
          echo "DATABASE_GITHUB_ACTIONS_HOST=postgres" >> .env
          echo "DATABASE_GITHUB_ACTIONS_PORT=5432" >> .env
          echo "GOOGLE_CLOUD_PROJECT_ID=${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}" >> .env
          echo "GOOGLE_CLOUD_REGION=${{ secrets.GOOGLE_CLOUD_REGION }}" >> .env
          echo "USE_CLOUD_SQL_AUTH_PROXY=FALSE" >> .env
          echo "GOOGLE_CLOUDSQL_INSTANCE_NAME=${{ secrets.GOOGLE_CLOUDSQL_INSTANCE_NAME }}" >> .env
          echo "DATABASE_PRODUCTION_NAME=${{ secrets.DATABASE_PRODUCTION_NAME }}" >> .env
          echo "DATABASE_PRODUCTION_USER=${{ secrets.DATABASE_PRODUCTION_USER }}" >> .env
          echo "DATABASE_PRODUCTION_PASSWORD=${{ secrets.DATABASE_PRODUCTION_PASSWORD }}" >> .env
          echo "DATABASE_PRODUCTION_USER=${{ secrets.DATABASE_PRODUCTION_USER }}" >> .env
          echo "DATABASE_PRODUCTION_HOST=/cloudsql/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}:${{ secrets.GOOGLE_CLOUD_REGION }}:${{ secrets.GOOGLE_CLOUDSQL_INSTANCE_NAME }}" >> .env
          echo "DATABASE_PRODUCTION_PORT=" >> .env
          echo "GITHUB_PERSONAL_ACCESS_TOKEN=${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" >> .env
          cat .env
#       - name: Google Cloud SQL Proxy
#         uses: mattes/gce-cloudsql-proxy-action@v1.0.1
#         with:
#           creds: ${{ secrets.GOOGLE_CLOUDSQL_SERVICE_ACCOUNT_KEY }}
#           instance: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}:${{ secrets.GOOGLE_CLOUD_REGION }}:${{ secrets.GOOGLE_CLOUDSQL_INSTANCE_NAME }}
      - name: Run Tests
        run: |
          python manage.py test
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - id: 'auth'
      - name: 'GCP authentication'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_CLOUD_APP_ENGINE_SERVICE_ACCOUNT_KEY }}'

      - id: 'deploy'
      - name: 'GCP App Engine deployment'
        uses: 'google-github-actions/deploy-appengine@v0'
        with:
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
          deliverables: '/app.yaml'
          version: 'v1'

      - id: 'url'
        run: 'curl "${{ steps.deploy.outputs.url }}"'

